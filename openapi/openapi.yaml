openapi: 3.0.0
info:
  version: '1'
  title: Ecommerce
  description: Airbnb Alterra
servers:
  - description: Amazon Web Service
    url: http://18.136.195.97:8000
paths:
  /register:
    post:
      summary: Create New User
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@gmail.com
                password:
                  type: string
                  example: test123
                name:
                  type: string
                  example: tester
      responses:
        '200':
          $ref: '#/components/responses/Response200register'
        '400':
          $ref: '#/components/responses/Response400'
        '406':
          $ref: '#/components/responses/Response406register'
  /login:
    post:
      summary: Login User
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@gmail.com
                password:
                  type: string
                  example: test123
      responses:
        '200':
          $ref: '#/components/responses/Response200login'
        '400':
          $ref: '#/components/responses/Response400login'
        '404':
          $ref: '#/components/responses/Response404login'
  /profile:
    get:
      security:
        - bearerAuth: []
      summary: Get User Profile
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/Response200getuser'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
  /user:
    put:
      security:
        - bearerAuth: []
      summary: Update User
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@gmail.com
                password:
                  type: string
                  example: test123
                name:
                  type: string
                  example: tester
      responses:
        '200':
          $ref: '#/components/responses/Response200putuser'
        '404':
          $ref: '#/components/responses/Response404'
    delete:
      security:
        - bearerAuth: []
      summary: Delete User
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: test123
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400deleteuser'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
  /feature:
    get:
      summary: Get all Category
      tags:
        - Features
      responses:
        '200':
          $ref: '#/components/responses/Response200getallfeature'
        '404':
          $ref: '#/components/responses/Response404'
  /house:
    post:
      security:
        - bearerAuth: []
      summary: Listing House
      tags:
        - Houses
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: rumah pondok indah
                address:
                  type: string
                  example: bikini bottom
                city:
                  type: string
                  example: jakarta
                price:
                  type: integer
                  example: 100000
      responses:
        '200':
          $ref: '#/components/responses/Response200posthouse'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
    get:
      summary: Get all houses
      description: 
        This endpoint have a query params for pagination, but if nil parameters will set to default.
      tags:
        - Houses
      responses:
        '200':
          $ref: '#/components/responses/Response200getallhouse'
        '400':
          $ref: '#/components/responses/Response400'
  /house/{houseId}:
    get:
      summary: Get a house by id
      tags:
        - Houses
      parameters:
        - name: houseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200gethouse'
        '404':
          $ref: '#/components/responses/Response404'
    put:
      security:
        - bearerAuth: []
      summary: Update by ID
      tags:
        - Houses
      parameters:
        - name: houseId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: rumah pondok indah
                address:
                  type: string
                  example: bikini bottom
                city:
                  type: string
                  example: jakarta
                price:
                  type: integer
                  example: 100000
      responses:
        '200':
          $ref: '#/components/responses/Response200puthouse'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
    delete:
      security:
        - bearerAuth: []
      summary: Delete by ID
      tags:
        - Houses
      parameters:
        - name: houseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
  /rating:
    post:
      security:
        - bearerAuth: []
      summary: Create a Rating
      tags:
        - Ratings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  example: 5
                comment:
                  type: string
                  example: nyaman
      responses:
        '200':
          $ref: '#/components/responses/Response200createrating'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
    get:
      summary: Get all ratings
      tags:
        - Ratings
      responses:
        '200':
          $ref: '#/components/responses/Response200getallrating'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
  /rating/{ratingId}:
    get:
      summary: Get a rating by id
      tags:
        - Ratings
      parameters:
        - name: ratingId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200getrating'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
    put:
      security:
        - bearerAuth: []
      summary: Update by ID
      tags:
        - Ratings
      parameters:
        - name: ratingId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  example: 3
                comment:
                  type: string
                  example: biasa
      responses:
        '200':
          $ref: '#/components/responses/Response200putrating'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
        '404':
          $ref: '#/components/responses/Response404'
    delete:
      security:
        - bearerAuth: []
      summary: Delete by ID
      tags:
        - Ratings
      parameters:
        - name: ratingId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
        '404':
          $ref: '#/components/responses/Response404'
  /transaction:
    post:
      security:
        - bearerAuth: []
      summary: Create transaction
      tags:
        - Transactions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                houseID:
                  type: integer
                  example: 1
                checkin_date:
                  type: string
                  example: "2022-01-19T18:13:01.246Z"
                checkout_date:
                  type: string
                  example: "2022-01-21T18:13:01.246Z"
      responses:
        '200':
          $ref: '#/components/responses/Response200createtransaction'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
    get:
      security:
        - bearerAuth: []
      summary: Get all Orders
      tags:
        - Transactions
      responses:
        '200':
          $ref: '#/components/responses/Response200getalltransaction'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
  /transaction/{transactionId}:
    get:
      security:
        - bearerAuth: []
      summary: Get transaction by id
      tags:
        - Transactions
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Response200gettransaction'
        '400':
          $ref: '#/components/responses/Response400'
        '401':
          $ref: '#/components/responses/Responsejwtexpired'
        '404':
          $ref: '#/components/responses/Response404'

components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT   
  responses:
    Responsejwtexpired:
      description: invalid or expired jwt token
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: invalid or expired jwt
    
    Response200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
   
    Response400:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Bad Request
                
    Response404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 404
              message:
                type: string
                example: Not Found
                
    Response200register:
      description: success create
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  email:
                    type: string
                    example: test@gmail.com
                  password:
                    type: string
                    example: fjasdoijwethgoajgsodjas2394013t
                  name:
                    type: string
                    example: tester
                    
    Response406register:
      description: Not allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 406
              message:
                type: string
                example: Email already exist
    
    Response200login:
      description: Success Login
      content:
        application/json:
           schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJlbWFpbCI6Im5hdWZhbEBnbWFpbC5jb20iLCJleHAiOjE2NDMxOTQ3OTksInJvbGUiOiJhZG1pbiIsInVzZXJJZCI6MX0.p05lPq_ZUrb7CQVE0PDROibsO_uf0ni63Hr-rRlujDA
                
    Response400login:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 404
              message:
                type: string
                example: Wrong Password
                
    Response404login:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 404
              message:
                type: string
                example: User Not Found
                
    Response200getuser:
      description: success get user
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  email:
                    type: string
                    example: test@gmail.com
                  password:
                    type: string
                    example: fjasdoijwethgoajgsodjas2394013t
                  name:
                    type: string
                    example: tester
                    
    Response200putuser:
      description: success update user
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  email:
                    type: string
                    example: test@gmail.com
                  password:
                    type: string
                    example: fjasdoijwethgoajgsodjas2394013t
                  name:
                    type: string
                    example: tester
                    
    Response400deleteuser:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 404
              message:
                type: string
                example: Wrong Password
                
    Response200getallfeature:
      description: success get all features
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                example:
                 - id: 1
                   name: wifi
                 - id: 2
                   name: bathtub
                 - id: 3
                   name: pool
    
    Response200posthouse:
      description: success create house
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userID:
                    type: string
                    example: 1
                  title:
                    type: string
                    example: rumah pondok indah
                  address:
                    type: string
                    example: bikini bottom
                  city:
                    type: string
                    example: jakarta
                  price:
                    type: integer
                    example: 100000
                    
    Response200getallhouse:
      description: success get all features
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              page: 
                type: integer
                example: 1
              per_page: 
                type: integer
                example: 10
              data:
                type: object
                example:
                 - id: 1
                   userID: 1
                   title: rumah pondok indah
                   address: bikini bottom
                   city: jakarta
                   price: 100000
                 - id: 2
                   userID: 2
                   title: rumah pondok jelek
                   address: malboro
                   city: ujung dunia
                   price: 500000 
                   
    Response200gethouse:
      description: success get house
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userID:
                    type: string
                    example: 1
                  title:
                    type: string
                    example: rumah pondok indah
                  address:
                    type: string
                    example: bikini bottom
                  city:
                    type: string
                    example: jakarta
                  price:
                    type: integer
                    example: 100000
                    
    Response200puthouse:
      description: success get house
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userID:
                    type: string
                    example: 1
                  title:
                    type: string
                    example: rumah pondok indah
                  address:
                    type: string
                    example: bikini bottom
                  city:
                    type: string
                    example: jakarta
                  price:
                    type: integer
                    example: 100000
                    
    Response200createrating:
      description: success create rating
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userID:
                    type: string
                    example: 1
                  rating:
                    type: integer
                    example: 5
                  comment:
                    type: string
                    example: nyaman
                    
    Response200getallrating:
      description: success get all rating
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                example:
                 - id: 1
                   userID: 1
                   rating: 5
                   comment: nyaman
                 - id: 2
                   userID: 1
                   rating: 1
                   comment: sampah
                   
    Response200getrating:
      description: success get rating
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userID:
                    type: string
                    example: 1
                  rating:
                    type: integer
                    example: 5
                  comment:
                    type: string
                    example: nyaman
    
    Response200putrating:
      description: success update rating
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userID:
                    type: string
                    example: 1
                  rating:
                    type: integer
                    example: 3
                  comment:
                    type: string
                    example: 
    
    Response200createtransaction:
      description: success create transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                type: object
                properties:
                  ID:
                    type: integer
                    example: 1
                  UserID:
                    type: integer
                    example: 1
                  HouseID:
                    type: integer
                    example: 1
                  InvoiceID:
                    type: string
                    example: 62E3D9455D1A4793AC2CC84902B725A7
                  PaymentURL:
                    type: string
                    example: https://checkout-staging.xendit.co/web/61ed71229690adcf0110bda7
                  BankID:
                    type: string
                    example: ""
                  PaymentMethod:
                    type: string
                    example: ""
                  Checkindate:
                    type: string
                    example: "2022-01-19T18:13:01.246Z"
                  Checkoutdate:
                    type: string
                    example: "2022-01-21T18:13:01.246Z"
                  Totalprice:
                    type: integer
                    example: 300000
                  Status:
                    type: string
                    example: PENDING
    Response200getalltransaction:
      description: success create transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                example:
                 - ID: 1
                   UserID: 1
                   HouseID: 1
                   InvoiceID: "62E3D9455D1A4793AC2CC84902B725A7"
                   PaymentURL: "https://checkout-staging.xendit.co/web/61ed71229690adcf0110bda7"
                   BankID: ""
                   PaymentMethod: ""
                   Checkindate: "2022-01-19T18:13:01.246Z"
                   Checkoutdate: "2022-01-21T18:13:01.246Z"
                   Totalprice: 300000
                   Status: PENDING
                 - ID: 2
                   UserID: 1
                   HouseID: 2
                   InvoiceID: "62E3D9455D1A4793AC2CC84902B725A7"
                   PaymentURL: "https://checkout-staging.xendit.co/web/61ed71229690adcf0110bda7"
                   BankID: ""
                   PaymentMethod: ""
                   Checkindate: "2022-01-22T18:13:01.246Z"
                   Checkoutdate: "2022-01-27T18:13:01.246Z"
                   Totalprice: 500000
                   Status: PENDING
                   
    Response200gettransaction:
      description: success get transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              message:
                type: string
                example: Successful Operation
              data:
                properties:
                  ID:
                    type: integer
                    example: 1
                  UserID:
                    type: integer
                    example: 1
                  HouseID:
                    type: integer
                    example: 1
                  InvoiceID:
                    type: string
                    example: 62E3D9455D1A4793AC2CC84902B725A7
                  PaymentURL:
                    type: string
                    example: https://checkout-staging.xendit.co/web/61ed71229690adcf0110bda7
                  BankID:
                    type: string
                    example: ""
                  PaymentMethod:
                    type: string
                    example: ""
                  Checkindate:
                    type: string
                    example: "2022-01-19T18:13:01.246Z"
                  Checkoutdate:
                    type: string
                    example: "2022-01-21T18:13:01.246Z"
                  Totalprice:
                    type: integer
                    example: 300000
                  Status:
                    type: string
                    example: PENDING